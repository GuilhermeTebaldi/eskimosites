index.html:
```html
<!doctype html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite2.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover" />


    <title>Eskimo Chapec√≥</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

```

package.json:
```json
{
  "name": "vite-react-framer-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.12.2",
    "clsx": "^2.1.1",
    "framer-motion": "^11.18.2",
    "motion": "^12.23.22",
    "qrcode": "^1.5.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.9.3",
    "tailwind-merge": "^2.6.0"
  },
  "devDependencies": {
    "@types/axios": "^0.9.36",
    "@types/node": "^18.19.55",
    "@types/qrcode": "^1.5.5",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.1",
    "@types/react-router-dom": "^5.3.3",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.1",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.19",
    "postcss": "^8.5.2",
    "prettier-plugin-tailwindcss": "^0.5.14",
    "tailwindcss": "^3.4.13",
    "typescript": "^5.6.3",
    "vite": "^5.4.14"
  }
}

```

postcss.config.js:
```js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

```

tailwind.config.ts:
```ts
import type { Config } from "tailwindcss";

const config: Config = {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      animation: {
        "energy-animate": "pulse 1s infinite ease-in-out",
      },
    },
  },
  plugins: [],
};

export default config;

```

vite.config.ts:
```ts
// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "src"),
    },
  },
});

```

tsconfig.json:
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,

    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

```

src/main.tsx:
```tsx
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Loja from "./Loja";
import MeusPedidos from "./MeusPedidos";

import "./index.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Loja />} />
        <Route path="/meus-pedidos" element={<MeusPedidos />} />
      </Routes>
    </BrowserRouter>
  </React.StrictMode>,
);

```

src/index.css:
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
@keyframes pulse-slow {
  0%,
  40% {
    transform: scale(1);
  }
  20% {
    transform: scale(1.2);
  }
}

.animate-pulse-slow {
  animation: pulse-slow 2.5s infinite;
}
@keyframes energy-rise {
  0% {
    opacity: 0;
    transform: translateY(20px) scale(0.8);
    box-shadow: 0 0 0px rgba(255, 215, 0, 0.5);
  }
  50% {
    opacity: 1;
    transform: translateY(-10px) scale(1.05);
    box-shadow:
      0 0 15px rgba(255, 215, 0, 0.8),
      0 0 25px rgba(255, 215, 0, 0.6);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
    box-shadow: 0 0 8px rgba(255, 215, 0, 0.5);
  }
}

.energy-animate {
  animation: energy-rise 2s ease-out forwards;
}

```

src/Loja.css:
```css
/* üîí Reseta e bloqueia scroll lateral */
html,
body {
  margin: 0;
  padding: 0;
  width: 100%;
  overflow-x: hidden;
  background: #fff;
  -webkit-tap-highlight-color: transparent; /* ‚úÖ Remove highlight no mobile */
}
/* Impede zoom por gesto de duplo toque e simplifica gestos */
html { touch-action: manipulation; }
button, a { touch-action: manipulation; }

/* iOS: garante 16px em campos para evitar zoom ao focar */
@supports (-webkit-touch-callout: none) {
  input, select, textarea { font-size: 16px !important; }
}

/* Desativa auto-ajuste de tamanho de texto no iOS */
html { -webkit-text-size-adjust: 100%; }

/* Container principal fixo */
.loja-container {
  width: 100vw;
  max-width: 100%;
  min-height: 100vh;
  overflow-x: hidden;
  background: linear-gradient(135deg, #ffffff, #f8f9fa, #fff);
  background-size: 300% 300%;
  animation: bgFlow 12s ease infinite;
  font-family: "Poppins", sans-serif;
  color: #2c2c2c;
  padding-bottom: 100px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

@keyframes bgFlow {
  0%,
  100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}

/* ‚úÖ Grid responsiva centralizada */
.produtos-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  gap: 16px;
  width: 100%;
  max-width: 1200px;
  padding: 0 12px;
  box-sizing: border-box;
  justify-items: center;
}

/* üì± Sempre 2 colunas no celular */
@media (max-width: 640px) {
  .produtos-grid {
    grid-template-columns: repeat(2, 1fr) !important;
    gap: 12px;
    padding: 0 8px;
  }
}

/* Anima√ß√£o de entrada */
.product-card {
  opacity: 0;
  transform: translateY(30px) scale(0.95);
  animation: cardFade 0.8s cubic-bezier(0.16, 1, 0.3, 1) forwards;
}
.product-card:nth-child(1) {
  animation-delay: 0.1s;
}
.product-card:nth-child(2) {
  animation-delay: 0.2s;
}
.product-card:nth-child(3) {
  animation-delay: 0.3s;
}
.product-card:nth-child(4) {
  animation-delay: 0.4s;
}

@keyframes cardFade {
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

/* Card estilo vidro */
.product-card {
  position: relative;
  background: rgba(255, 255, 255, 0.7);
  backdrop-filter: blur(14px);
  border-radius: 24px;
  padding: 16px;
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.06);
  transition:
    transform 0.3s ease,
    box-shadow 0.3s ease;
  cursor: pointer;
  perspective: 1000px;
  width: 100%;
  max-width: 200px;
  z-index: 1;
  isolation: isolate; /* ‚úÖ Bloqueia hover invadindo vizinhos */
}
.product-card:hover {
  transform: scale(1.03);
  box-shadow: 0 20px 45px rgba(0, 0, 0, 0.1);
}

/* ‚úÖ Hitbox precisa */
.product-card * {
  pointer-events: none;
}
.product-card .product-image-wrapper,
.product-card .product-info,
.product-card button {
  pointer-events: auto;
}

/* Imagem */
.product-image-wrapper {
  width: 100%;
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 20px;
  overflow: hidden;
  background: #fffdfd;
  transition: transform 0.3s ease;
  z-index: 2;
}
.product-card:hover .product-image-wrapper {
  transform: scale(1.05);
}
.product-image {
  max-height: 100%;
  max-width: 100%;
  transition: transform 0.4s ease;
}
.product-card:hover .product-image {
  transform: scale(1.12) rotate(1.5deg);
}

/* Nome e pre√ßo */
.product-title {
  font-size: 1rem;
  font-weight: 600;
  margin-top: 12px;
  color: #222;
  transition: color 0.3s;
  text-align: center;
}
.product-card:hover .product-title {
  color: #d90429;
}
.product-price {
  font-size: 1rem;
  font-weight: bold;
  color: #ef233c;
  text-align: center;
}

/* Inputs e selects */
input[type="text"],
select {
  background: rgba(255, 255, 255, 0.6);
  backdrop-filter: blur(10px);
  border-radius: 14px;
  border: 1px solid rgba(255, 255, 255, 0.3);
  padding: 12px 16px;
  transition: all 0.3s ease;
}
input[type="text"]:focus,
select:focus {
  border-color: #ef233c;
  box-shadow: 0 0 12px rgba(239, 35, 60, 0.3);
  outline: none;
}

/* Bot√µes com gradiente */
button {
  background: linear-gradient(90deg, #ef233c, #ff6b6b);
  color: #fff;
  border: none;
  border-radius: 12px;
  padding: 8px 14px;
  font-weight: 600;
  transition: all 0.3s ease;
  background-size: 200% 200%;
}
button:hover {
  background-position: 100% 0;
  transform: translateY(-2px) scale(1.05);
  box-shadow: 0 8px 20px rgba(239, 35, 60, 0.3);
}

/* Carrinho vidro */
.fixed.right-0.top-0.z-50 {
  background: rgba(255, 255, 255, 0.85) !important;
  backdrop-filter: blur(18px);
  border-left: 1px solid rgba(255, 255, 255, 0.5);
  box-shadow: -8px 0 30px rgba(0, 0, 0, 0.1);
}
/* Suaviza anima√ß√£o de altura */
.fixed {
  transition: height 0.3s ease-in-out;
}
.fixed > * {
  transition:
    opacity 0.3s ease-in-out,
    transform 0.3s ease-in-out;
}

```

src/Loja.tsx:
```tsx
// Loja.tsx ‚Äî vers√£o revisada (monol√≠tica) 100% focada em Mercado Pago
// - Remove 100% do antigo PIX local/QRCode (componentes, helpers, modais, confirma√ß√µes locais)
// - Mant√©m e aprimora o fluxo Mercado Pago (Wallet Brick) com overlay de prepara√ß√£o e polling
// - Corrige estados e efeitos para n√£o haver refer√™ncias ao PIX antigo
// - Mant√©m filtros, carrinho, sele√ß√£o de loja, geolocaliza√ß√£o, UI essenciais

import React, {
  useCallback,
  useEffect,
  useMemo,
  useReducer,
  useRef,
  useState,
} from "react";
import axios from "axios";
import LinhaProdutosAtalhos from "./LinhaProdutosAtalhos";
import { Link } from "react-router-dom";
import "./Loja.css";

/************************************
 * Tipos
 ************************************/
interface Product {
  id: number;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  categoryName: string;
  subcategoryName?: string;
  stock: number;
  sortRank?: number;
  pinnedTop?: boolean;
  style?: Record<string, unknown>;
}


interface CartItem {
  product: Product;
  quantity: number;
}

interface PaymentConfig {
  provider?: string;
  isActive?: boolean;
  mpPublicKey?: string; // camelCase
  MpPublicKey?: string; // PascalCase (compat backend)
}

/************************************
 * Constantes & helpers
 ************************************/
type ViteEnv = { VITE_API_URL?: string };
const API_URL: string =
  ((import.meta as unknown as { env?: ViteEnv }).env?.VITE_API_URL) ??
  "http://localhost:8080/api";

const UI = {
  HEADER_MAX: 120,
  HEADER_MIN: 50,
  PRODUCTS_PER_PAGE: 12,
} as const;

const fmtBRL = new Intl.NumberFormat("pt-BR", {
  style: "currency",
  currency: "BRL",
});

const clampQty = (qty: number, max: number) => Math.max(0, Math.min(qty, max));

// Normaliza texto (sem acento, min√∫sculo)
const normalize = (text: string) =>
  text
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "");

// Dist√¢ncia Haversine (km)
function getDistanceFromLatLonInKm(
  lat1: number,
  lon1: number,
  lat2: number,
  lon2: number,
) {
  const R = 6371;
  const dLat = (lat2 - lat1) * (Math.PI / 180);
  const dLon = (lon2 - lon1) * (Math.PI / 180);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * (Math.PI / 180)) *
      Math.cos(lat2 * (Math.PI / 180)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

  return R * c;
}

// Geolocaliza√ß√£o como Promise
const getPosition = () =>
  new Promise<GeolocationPosition>((resolve, reject) => {
    if (!navigator.geolocation)
      return reject(new Error("Geolocaliza√ß√£o indispon√≠vel"));
    navigator.geolocation.getCurrentPosition(resolve, reject);
  });

// ===== Confirma√ß√£o vista (ACK) =====
const ACK_TTL_MS = 1000 * 60 * 60 * 24; // 24h

function ackKey(id: number) {
  return `order_ack_${id}`;
}
function setOrderAck(id: number) {
  try {
    localStorage.setItem(ackKey(id), JSON.stringify({ seenAt: Date.now() }));
  } catch { /* empty */ }
}
function hasOrderAck(id: number) {
  try {
    const raw = localStorage.getItem(ackKey(id));
    if (!raw) return false;
    const { seenAt } = JSON.parse(raw) ?? {};
    if (!seenAt) return false;
    return Date.now() - Number(seenAt) < ACK_TTL_MS;
  } catch {
    return false;
  }
}

// ===== Assinatura imut√°vel do estado do pedido =====
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function buildOrderSignature(
  cart: CartItem[],
  deliveryFee: number,
  selectedStore: string | null
): string {
  const payload = {
    store: selectedStore ?? "",
    fee: Number(Number(deliveryFee).toFixed(2)),
    items: cart
      .map(i => ({ id: i.product.id, q: i.quantity, p: Number(i.product.price.toFixed(2)) }))
      .sort((a, b) => a.id - b.id),
  };
  return btoa(unescape(encodeURIComponent(JSON.stringify(payload))));
}

const SIG_KEY = "last_order_sig";
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getLastSig(): string | null {
  try { return localStorage.getItem(SIG_KEY); } catch { return null; }
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function setLastSig(sig: string) {
  try { localStorage.setItem(SIG_KEY, sig); } catch { /* noop */ }
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function clearLastSig() {
  try { localStorage.removeItem(SIG_KEY); } catch { /* noop */ }
}

/************************************
 * Hooks utilit√°rios
 ************************************/
function useLocalStorageCart(
  keyCart = "eskimo_cart",
  keyStore = "eskimo_store",
) {
  const [storedCart, setStoredCart] = useState<CartItem[]>([]);
  const [storedStore, setStoredStore] = useState<string | null>(null);

  useEffect(() => {
    try {
      const rawCart = localStorage.getItem(keyCart);
      if (rawCart) setStoredCart(JSON.parse(rawCart));
      const st = localStorage.getItem(keyStore);
      if (st) setStoredStore(st);
    } catch {
      // noop
    }
  }, [keyCart, keyStore]);

  useEffect(() => {
    try {
      localStorage.setItem(keyCart, JSON.stringify(storedCart));
    } catch {
      // noop
    }
  }, [keyCart, storedCart]);

  useEffect(() => {
    try {
      if (storedStore) localStorage.setItem(keyStore, storedStore);
    } catch {
      // noop
    }
  }, [keyStore, storedStore]);

  return { storedCart, setStoredCart, storedStore, setStoredStore } as const;
}

function useDeliveryFee(
  deliveryRate: number,
  selectedStore: string | null,
  storeLocations: { name: string; lat: number; lng: number }[],
) {
  const [deliveryFee, setDeliveryFee] = useState(0);

  const recalc = useCallback(async () => {
    if (!(deliveryRate > 0 && selectedStore)) return;
    const loja = storeLocations.find((s) => s.name === selectedStore);
    if (!loja) return;
    try {
      const pos = await getPosition();
      const d = getDistanceFromLatLonInKm(
        pos.coords.latitude,
        pos.coords.longitude,
        loja.lat,
        loja.lng,
      );
      setDeliveryFee(parseFloat((d * deliveryRate).toFixed(2)));
    } catch (e) {
      console.error("Erro ao obter localiza√ß√£o:", e);
    }
  }, [deliveryRate, selectedStore, storeLocations]);

  useEffect(() => {
    recalc();
  }, [recalc]);

  return { deliveryFee, recalc } as const;
}

// ‚Äî‚Äî‚Äî Tipos auxiliares (Mercado Pago Wallet + guards) ‚Äî‚Äî‚Äî
type Json = Record<string, unknown>;

type WalletController = { unmount?: () => void };
type WalletOptions = {
  initialization: { preferenceId: string };
  customization?: { texts?: { valueProp?: string } };
  callbacks?: {
    onReady?: () => void;
    onError?: (error: unknown) => void;
  };
};
type Bricks = {
  create: (
    name: "wallet",
    containerId: string,
    options: WalletOptions
  ) => Promise<WalletController>;
};
interface MercadoPagoCtor {
  new (publicKey: string, opts?: { locale?: string }): { bricks: () => Bricks };
}
declare global {
  interface Window {
    MercadoPago?: MercadoPagoCtor;
  }
}

// Type guards p/ respostas JSON
function isOrderResponse(x: unknown): x is { id: number } {
  return (
    typeof x === "object" &&
    x !== null &&
    "id" in x &&
    typeof (x as Json).id === "number"
  );
}
function isCheckoutResponse(x: unknown): x is { preferenceId: string } {
  return (
    typeof x === "object" &&
    x !== null &&
    "preferenceId" in x &&
    typeof (x as Json).preferenceId === "string"
  );
}

/************************************
 * Reducer do fluxo (apenas checkout)
 ************************************/
type Stage = "idle" | "checkout";
interface UIState {
  stage: Stage;
}
type UIAction = { type: "OPEN_CHECKOUT" } | { type: "RESET" };

const uiInitial: UIState = { stage: "idle" };

function uiReducer(state: UIState, action: UIAction): UIState {
  switch (action.type) {
    case "OPEN_CHECKOUT":
      return { stage: "checkout" };
    case "RESET":
      return uiInitial;
    default:
      return state;
  }
}

/************************************
 * Componente principal
 ************************************/
export default function Loja() {
  // Estados de pagamento Mercado Pago
  const [paymentBusy, setPaymentBusy] = useState(false);
  const [paymentOverlay, setPaymentOverlay] = useState(false);
  const [paymentOverlayProgress, setPaymentOverlayProgress] = useState(0);
  const [walletOpen, setWalletOpen] = useState(false);
  const walletCtrlRef = useRef<WalletController | null>(null);
  const pollRef = useRef<number | null>(null);

  // refs para acessibilidade
  const checkoutFirstInputRef = useRef<HTMLInputElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // reducer do fluxo
  const [ui, dispatch] = useReducer(uiReducer, uiInitial);

  // estado geral
  const [orderId, setOrderId] = useState<number | null>(null);
  const [loading, setLoading] = useState(true);
  const [phoneNumber, setPhoneNumber] = useState("");
  const [showInstruction, setShowInstruction] = useState(true);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);

  const { storedCart, setStoredCart, storedStore, setStoredStore } =
    useLocalStorageCart();
  const [cart, setCart] = useState<CartItem[]>(storedCart);
  const [selectedStore, setSelectedStore] = useState<string | null>(
    storedStore,
  );

  // Toast simples local
  const [toast, setToast] = useState<{
    type: "info" | "success" | "warning" | "error";
    message: string;
  } | null>(null);
  const toastTimerRef = useRef<number | null>(null);
  const showToast = useCallback(
    (
      message: string,
      type: "info" | "success" | "warning" | "error" = "info",
      timeoutMs = 2600,
    ) => {
      setToast({ type, message });
      if (toastTimerRef.current) window.clearTimeout(toastTimerRef.current);
      toastTimerRef.current = window.setTimeout(() => {
        setToast(null);
        toastTimerRef.current = null;
      }, timeoutMs);
    },
    [],
  );
  useEffect(() => {
    return () => {
      if (toastTimerRef.current) window.clearTimeout(toastTimerRef.current);
    };
  }, []);

  const [showConfirmation, setShowConfirmation] = useState(false);

  const [quickFilterCategory, setQuickFilterCategory] = useState<string | null>(
    null,
  );
  const [quickFilterSubcategory, setQuickFilterSubcategory] = useState<
    string | null
  >(null);
  const [search, setSearch] = useState("");
  const [componentKey, setComponentKey] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [customAddress, setCustomAddress] = useState("");

  const [customerName, setCustomerName] = useState("");
  const [deliveryType] = useState<"retirar" | "entregar">("entregar");
  const [deliveryRate, setDeliveryRate] = useState<number>(0);


  const [address, setAddress] = useState("");
  const [street, setStreet] = useState("");
  const [number, setNumber] = useState("");
  const [complement, setComplement] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [selectedSubcategory, setSelectedSubcategory] = useState<string | null>(
    null,
  );
  const [quantityToAdd, setQuantityToAdd] = useState(1);

  const [minDelivery, setMinDelivery] = useState<number>(0);


  // Config de pagamento por loja (Mercado Pago)
  const [paymentConfig, setPaymentConfig] = useState<PaymentConfig | null>(
    null,
  );

  // lojas (constante)
  const storeLocations = useMemo(
    () => [
      { name: "efapi", lat: -27.112815, lng: -52.670769 },
      { name: "palmital", lat: -27.1152884, lng: -52.6166752 },
      { name: "passo", lat: -27.077056, lng: -52.6122383 },
    ],
    [],
  );

  // hook da taxa de entrega
  const { deliveryFee, recalc } = useDeliveryFee(
    deliveryRate,
    selectedStore,
    storeLocations,
  );
  const effectiveDeliveryFee = useMemo(
    () => Math.max(deliveryFee, minDelivery),
    [deliveryFee, minDelivery]
  );
  
  // persistir carrinho e unidade
  useEffect(() => {
    setStoredCart(cart);
  }, [cart, setStoredCart]);
  useEffect(() => {
    if (selectedStore) setStoredStore(selectedStore);
  }, [selectedStore, setStoredStore]);

  // qtd no carrinho para um produto
  const getQtyInCart = useCallback(
    (productId: number) =>
      cart.find((i) => i.product.id === productId)?.quantity ?? 0,
    [cart],
  );

  // subtotal
  const subtotal = useMemo(
    () =>
      cart.reduce((acc, item) => acc + item.product.price * item.quantity, 0),
    [cart],
  );

  // restante do selecionado
  const remainingForSelected = useMemo(
    () =>
      selectedProduct
        ? Math.max(selectedProduct.stock - getQtyInCart(selectedProduct.id), 0)
        : 0,
    [selectedProduct, getQtyInCart],
  );

  // formata√ß√£o moeda memoizada
  const toBRL = useCallback((v: number) => fmtBRL.format(v), []);

  // header com scroll
  const [headerHeight, setHeaderHeight] = useState<number>(UI.HEADER_MAX);
  const lastScrollYRef = useRef(0);
  useEffect(() => {
    const handleScroll = () => {
      const currentY = window.scrollY;
      const maxHeight = UI.HEADER_MAX;
      if (currentY <= 0) setHeaderHeight(maxHeight);
      else if (currentY > lastScrollYRef.current && currentY > 20)
        setHeaderHeight(UI.HEADER_MIN);
      else if (currentY < lastScrollYRef.current) setHeaderHeight(maxHeight);
      lastScrollYRef.current = currentY;
    };
    window.addEventListener("scroll", handleScroll, { passive: true });
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  // clique fora para fechar dropdown de unidade (quando exibido)
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [, setIsStoreSelectorExpanded] = useState(false);
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsStoreSelectorExpanded(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  // leitura de querystring (?paid=1&orderId=XYZ) ou fallback localStorage,
  // mas s√≥ abre confirma√ß√£o se o pedido estiver pago e ainda n√£o tiver ACK
  useEffect(() => {
    const qs = new URLSearchParams(window.location.search);
    const paid = qs.get("paid") === "1";
    const idStr = qs.get("orderId");
    const id = idStr ? parseInt(idStr, 10) : NaN;

    async function resolveAndShow(orderId: number) {
      if (!Number.isFinite(orderId)) return;

      // Se j√° vimos, n√£o reabrir
      if (hasOrderAck(orderId)) return;

      try {
        type OrderDTO = {
          paymentStatus: string | undefined; status?: string; Status?: string 
};
        const res = await axios.get<OrderDTO>(`${API_URL}/orders/${orderId}`);
        const d = res.data ?? {};
        const status = String((d.status ?? d.Status ?? d.paymentStatus ?? "")).toLowerCase();

        if (status === "pago" || status === "approved" || status === "paid") {
          setOrderId(orderId);
          setShowConfirmation(true);
          setCart([]);
          setOrderAck(orderId);
          clearLastSig();
          try {
            localStorage.setItem("last_order_id", String(orderId));
          } catch { /* empty */ }
        }
        
      } catch {
        // silencioso: se n√£o achou o pedido, n√£o abre
      }
    }

    if (paid && Number.isFinite(id)) {
      // Mesmo com paid=1, s√≥ mostra se backend confirmar como pago
      resolveAndShow(id);
      return;
    }
    

    // Fallback: tentar o √∫ltimo pedido salvo
    try {
      const last = localStorage.getItem("last_order_id");
      const lastId = last ? parseInt(last, 10) : NaN;
      if (Number.isFinite(lastId)) resolveAndShow(lastId);
    } catch { /* empty */ }
  }, []);

  // Polling universal: com orderId definido e sem confirma√ß√£o aberta,
  // verifica status a cada 5s at√© 10 minutos. Ao "pago", abre confirma√ß√£o.
  useEffect(() => {
    if (!orderId || showConfirmation) return;

    let tries = 0;
    const maxTries = Math.ceil((10 * 60) / 5); // 10 minutos
    const iv = window.setInterval(async () => {
      tries++;
      try {
        type OrderDTO = { status?: string; Status?: string };
        const res = await axios.get<OrderDTO>(`${API_URL}/orders/${orderId}`);
        const d = res.data ?? {};
        const status = String((d.status ?? d.Status) ?? "").toLowerCase();
        if (status === "pago") {
          setShowConfirmation(true);
          setCart([]);
          if (orderId) setOrderAck(orderId);
          clearLastSig();
          try {
            localStorage.setItem("last_order_id", String(orderId));
          } catch { /* empty */ }
          window.clearInterval(iv);
        }
      } catch {
        /* ignore */
      }
      if (tries >= maxTries) window.clearInterval(iv);
    }, 5000);

    return () => window.clearInterval(iv);
  }, [orderId, showConfirmation]);

  // detectar loja mais pr√≥xima
  useEffect(() => {
    (async () => {
      try {
        const pos = await getPosition();
        const userLat = pos.coords.latitude;
        const userLng = pos.coords.longitude;
        let closest = storeLocations[0];
        let min = getDistanceFromLatLonInKm(
          userLat,
          userLng,
          closest.lat,
          closest.lng,
        );
        for (let i = 1; i < storeLocations.length; i++) {
          const s = storeLocations[i];
          const d = getDistanceFromLatLonInKm(userLat, userLng, s.lat, s.lng);
          if (d < min) {
            min = d;
            closest = s;
          }
        }
        setSelectedStore(closest.name);
        setShowInstruction(false);
      } catch (err) {
        console.log("N√£o foi poss√≠vel obter a localiza√ß√£o:", err);
        setShowInstruction(true);
        setIsStoreSelectorExpanded(true);
      }
    })();
  }, [storeLocations]);

  // buscar deliveryRate
  useEffect(() => {
    axios
      .get<{ deliveryRate: number; minDelivery: number }>(`${API_URL}/settings`)
      .then((res) => {
        setDeliveryRate(res.data?.deliveryRate ?? 0);
        setMinDelivery(res.data?.minDelivery ?? 0);
      })
      .catch((err) => console.error("Erro ao buscar settings:", err));
  }, []);
  
  

  // buscar produtos (UNIFICADO)
  useEffect(() => {
    if (!selectedStore) return;
    let isMounted = true;
    setLoading(true);
    (async () => {
      try {
        const res = await axios.get<Product[]>(
          `${API_URL}/products/list?store=${selectedStore}&page=1&pageSize=200`,
        );
        if (isMounted) setProducts(Array.isArray(res.data) ? res.data : []);
      } catch (err) {
        console.error("Erro ao buscar produtos:", err);
      } finally {
        if (isMounted) setLoading(false);
      }
    })();
    return () => {
      isMounted = false;
    };
  }, [selectedStore]);

  // buscar config de pagamento da loja
  useEffect(() => {
    const storeName = (selectedStore ?? "").trim();
    if (!storeName) {
      setPaymentConfig(null);
      return;
    }
    fetch(`${API_URL}/paymentconfigs/${encodeURIComponent(storeName)}`)
      .then((r) => (r.ok ? r.json() : null))
      .then((data: PaymentConfig | null) => {
        setPaymentConfig(data);
      })
      .catch((e) => {
        console.warn("paymentconfigs fetch error", e);
        setPaymentConfig(null);
      });
  }, [selectedStore]);

  // categorias e subcategorias memorizadas
  const categories = useMemo(
    () => Array.from(new Set(products.map((p) => p.categoryName))),
    [products],
  );
  const subcategoriesByCategory = useMemo(() => {
    const map = new Map<string, string[]>();
    for (const p of products) {
      if (!p.subcategoryName) continue;
      if (!map.has(p.categoryName)) map.set(p.categoryName, []);
      const arr = map.get(p.categoryName)!;
      if (!arr.includes(p.subcategoryName)) arr.push(p.subcategoryName);
    }
    return map;
  }, [products]);
  const getSubcategories = useCallback(
    (category: string) => subcategoriesByCategory.get(category) ?? [],
    [subcategoriesByCategory],
  );

  // filtros memorizados
  const filtered = useMemo(() => {
    const searchTerms = normalize(search).split(" ").filter(Boolean);
    return products.filter((p) => {
      const searchableText = normalize(
        `${p.name} ${p.description} ${p.subcategoryName ?? ""}`,
      );
      const matchesSearch = searchTerms.every((term) =>
        searchableText.includes(term),
      );
      const matchesCategory =
        search.trim() === ""
          ? quickFilterCategory
            ? p.categoryName === quickFilterCategory
            : selectedCategory
            ? p.categoryName === selectedCategory
            : true
          : true;
      const matchesSubcategory = quickFilterSubcategory
        ? p.subcategoryName === quickFilterSubcategory
        : selectedSubcategory
        ? p.subcategoryName === selectedSubcategory
        : true;
      return matchesSearch && matchesCategory && matchesSubcategory;
    });
  }, [
    products,
    search,
    quickFilterCategory,
    quickFilterSubcategory,
    selectedCategory,
    selectedSubcategory,
  ]);

  const produtosOrdenados = useMemo(() => {
    const ordemCategorias = [
      "Picol√©",
      "Pote de Sorvete",
      "Tortas",
      "A√ßa√≠",
      "Sundae",
      "Extras",
      "selleto",
      "Complementos",
    ];
    const ordemSubcategorias: Record<string, string[]> = {
      Picol√©: [
        "Frutas",
        "Cremes",
        "Diamond",
        "Ituzinho",
        "Kids",
        "Grego",
        "Sem Subcategoria",
      ],
      "Pote de Sorvete": [
        "2L",
        "1,5L",
        "Best Cup",
        "Grand Nevado",
        "Sem Subcategoria",
      ],
      Tortas: ["Sem Subcategoria"],
      A√ßa√≠: ["guaran√°", "banana"],
      Sundae: ["Sem Subcategoria"],
      Extras: ["Cobertura", "Casc√£o"],
      selleto: ["Sem Subcategoria"],
      Complementos: ["Sem Subcategoria"],
    };
    const getCatIdx = (c: string) => {
      const idx = ordemCategorias.indexOf(c);
      return idx === -1 ? 999 : idx;
    };
    const getSubIdx = (c?: string, s?: string) => {
      if (!c || !s) return 999;
      const arr = ordemSubcategorias[c];
      if (!arr) return 999;
      const i = arr.indexOf(s);
      return i === -1 ? 999 : i;
    };
    return [...filtered].sort((a, b) => {
      if ((a.pinnedTop ?? false) !== (b.pinnedTop ?? false)) {
        return (b.pinnedTop ? 1 : 0) - (a.pinnedTop ? 1 : 0);
      }
      if ((a.sortRank ?? 9999) !== (b.sortRank ?? 9999)) {
        return (a.sortRank ?? 9999) - (b.sortRank ?? 9999);
      }
      const cA = getCatIdx(a.categoryName);
      const cB = getCatIdx(b.categoryName);
      if (cA !== cB) return cA - cB;
      const sA = getSubIdx(a.categoryName, a.subcategoryName);
      const sB = getSubIdx(b.categoryName, b.subcategoryName);
      if (sA !== sB) return sA - sB;
      return a.name.localeCompare(b.name);
    });

  }, [filtered]);

  // pagina√ß√£o autom√°tica (infinite scroll)
  const paginados = useMemo(
    () => produtosOrdenados.slice(0, currentPage * UI.PRODUCTS_PER_PAGE),
    [produtosOrdenados, currentPage],
  );

  const totalPages = useMemo(
    () => Math.ceil(filtered.length / UI.PRODUCTS_PER_PAGE),
    [filtered.length],
  );

  // sentinela para carregar mais
  const loadMoreRef = useRef<HTMLDivElement | null>(null);
  useEffect(() => {
    if (!loadMoreRef.current) return;

    const observer = new IntersectionObserver(
      (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
          setCurrentPage((p) => {
            if (p < totalPages) return p + 1;
            return p;
          });
        }
      },
      { rootMargin: "200px" },
    );

    observer.observe(loadMoreRef.current);

    return () => {
      if (loadMoreRef.current) observer.unobserve(loadMoreRef.current);
    };
  }, [totalPages]);

  // m√°scara e envio limpo do telefone
  const handlePhoneChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      let valor = e.target.value.replace(/\D/g, "");
      if (!valor.startsWith("55")) valor = "55" + valor;
      if (valor.length <= 13) setPhoneNumber(valor);
    },
    [],
  );

  // Handlers de carrinho
  const addToCart = useCallback(
    (product: Product, quantity: number = 1) => {
      setCart((prev) => {
        const existing = prev.find((i) => i.product.id === product.id);
        const currentInCart = existing?.quantity ?? 0;
        const remaining = product.stock - currentInCart;
        if (remaining <= 0) {
          showToast("Estoque m√°ximo j√° est√° no seu carrinho.", "warning");
          return prev;
        }
        const toAdd = Math.min(quantity, remaining);
        if (existing)
          return prev.map((i) =>
            i.product.id === product.id
              ? { ...i, quantity: i.quantity + toAdd }
              : i,
          );
        return [...prev, { product, quantity: toAdd }];
      });
      setSelectedProduct(null);
      setQuantityToAdd(1);
    },
    [showToast],
  );

  const removeFromCart = useCallback(
    (id: number) => setCart((prev) => prev.filter((i) => i.product.id !== id)),
    [],
  );

  const updateQuantity = useCallback((id: number, delta: number) => {
    setCart((prev) =>
      prev
        .map((item) => {
          if (item.product.id !== id) return item;
          const max = item.product.stock;
          const next = clampQty(item.quantity + delta, max);
          return next === 0 ? null : { ...item, quantity: next };
        })
        .filter((i): i is CartItem => i !== null),
    );
  }, []);

  // foco no primeiro input ao abrir checkout
  useEffect(() => {
    if (ui.stage === "checkout")
      setTimeout(() => checkoutFirstInputRef.current?.focus(), 0);
  }, [ui.stage]);

  // ESC fecha o checkout
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        if (ui.stage === "checkout") dispatch({ type: "RESET" });
      }
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [ui.stage]);

  // Valida√ß√£o antes do pagamento
  const validateBeforePayment = useCallback(async (): Promise<boolean> => {
    if (cart.length === 0) {
      showToast("Seu carrinho est√° vazio!", "warning");
      return false;
    }
    if (!selectedStore) {
      showToast("Selecione a unidade para continuar.", "warning");
      return false;
    }
    if (!customerName.trim()) {
      showToast("Informe seu nome completo.", "warning");
      return false;
    }

    // Entrega obrigat√≥ria no layout atual
    if (!address.trim()) {
      showToast("Escolha seu bairro.", "warning");
      return false;
    }
    if (address === "Outro" && !customAddress.trim()) {
      showToast("Digite seu bairro no campo 'Outro'.", "warning");
      return false;
    }
    if (!street.trim()) {
      showToast("Informe a rua.", "warning");
      return false;
    }
    if (!number.trim()) {
      showToast("Informe o n√∫mero.", "warning");
      return false;
    }
    if (!phoneNumber || phoneNumber.replace(/\D/g, "").length < 13) {
      showToast("Informe seu WhatsApp com DDD (ex: 49991234567).", "warning");
      return false;
    }
    if (deliveryFee === 0 && minDelivery === 0) {
      await recalc();
      showToast("Ative sua localiza√ß√£o ou informe endere√ßo. N√£o foi poss√≠vel calcular a taxa.", "warning");
      return false;
    }
    

    return true;
  }, [
    cart.length,
    selectedStore,
    customerName,
    address,
    customAddress,
    street,
    number,
    phoneNumber,
    deliveryFee,
    minDelivery,
    recalc,
  ]);

  // SDK do Mercado Pago
  const loadMPSDK = useCallback(async (): Promise<MercadoPagoCtor> => {
    if (window.MercadoPago) return window.MercadoPago;
    await new Promise<void>((resolve, reject) => {
      const s = document.createElement("script");
      s.src = "https://sdk.mercadopago.com/js/v2";
      s.async = true;
      s.onload = () => resolve();
      s.onerror = () => reject(new Error("Falha ao carregar SDK do Mercado Pago"));
      document.head.appendChild(s);
    });
    if (!window.MercadoPago) {
      throw new Error("SDK do Mercado Pago n√£o dispon√≠vel ap√≥s carregar script.");
    }
    return window.MercadoPago;
  }, []);

  const stopPolling = useCallback(() => {
    if (pollRef.current) {
      window.clearInterval(pollRef.current);
      pollRef.current = null;
    }
  }, []);

  const checkPaidOnce = useCallback(async (id: number): Promise<boolean> => {
    try {
      const r = await fetch(`${API_URL}/orders/${id}`);
      if (!r.ok) return false;
      const o = await r.json();
      const raw = String((o?.status ?? o?.Status ?? o?.paymentStatus ?? "") as string).toLowerCase();
      return raw === "pago" || raw === "approved" || raw === "paid";
    } catch {
      return false;
    }
  }, []);
  

  // Abre o Wallet Brick
  const openWalletBrick = useCallback(
    async (preferenceId: string, currentOrderId: number) => {
      try {
        const MP = await loadMPSDK();

        const publicKey = paymentConfig?.mpPublicKey ?? paymentConfig?.MpPublicKey;
        if (!publicKey) {
          showToast("Public Key do Mercado Pago n√£o configurada para esta loja.", "error");
          return;
        }

        const mp = new MP(publicKey, { locale: "pt-BR" });
        const bricks = mp.bricks();

        setWalletOpen(true);

        const ctrl = await bricks.create("wallet", "mp-wallet-container", {
          initialization: { preferenceId },
          customization: { texts: { valueProp: "security_details" } },
          callbacks: {
            onReady: () => {
              setPaymentOverlay(false);
            },
            onError: (err: unknown) => {
              console.error("Wallet error:", err);
              showToast("Erro no pagamento (Mercado Pago).", "error");
              setWalletOpen(false);
            },
          },
        });

        walletCtrlRef.current = ctrl;

        // Polling do pedido at√© ficar pago
        let tries = 0;
        stopPolling();
        pollRef.current = window.setInterval(async () => {
          tries++;
          const paid = await checkPaidOnce(currentOrderId);
          if (paid) {
            stopPolling();
            try {
              walletCtrlRef.current?.unmount?.();
            } catch {
              /* empty */
            }
            setWalletOpen(false);
            setOrderId(currentOrderId);
            setCart([]);
            setOrderAck(currentOrderId);
            clearLastSig();
          
            // ‚úÖ Redireciona automaticamente para a tela de pedidos confirmados
            window.location.href = `/meus-pedidos?orderId=${currentOrderId}&paid=1`;
          }
          

          if (tries > 180) {
            // ~12min
            stopPolling();
          }
        }, 4000);
      } catch (e) {
        console.error(e);
        showToast("N√£o foi poss√≠vel abrir o pagamento no site.", "error");
        setWalletOpen(false);
      }
    },
    [loadMPSDK, paymentConfig, showToast, checkPaidOnce, stopPolling, setPaymentOverlay]
  );

  // Fluxo de pagamento com Mercado Pago (cria pedido ‚Üí inicia cobran√ßa no backend)
  const handleMercadoPagoPayment = useCallback(async () => {
    if (paymentBusy) return;

    setPaymentBusy(true);
    setPaymentOverlay(true);
    setPaymentOverlayProgress(0);

    const overlayTimer = window.setInterval(() => {
      setPaymentOverlayProgress((p) => Math.min(p + Math.random() * 10 + 5, 92));
    }, 300);

    try {
      const ok = await validateBeforePayment();
      // Se j√° existe pedido pendente mas a "assinatura" mudou, cancela o antigo
      const currentSig = buildOrderSignature(cart, effectiveDeliveryFee, selectedStore);

      if (orderId && getLastSig() && getLastSig() !== currentSig) {
        try {
          await fetch(`${API_URL}/orders/${orderId}/cancel`, { method: "PATCH" });
        } catch { /* n√£o bloqueia o fluxo */ }
        setOrderId(null);
      }

      if (!ok) return;

      // 1) usa pedido existente; sen√£o cria
      let currentOrderId = orderId ?? null;
      if (!currentOrderId) {
        const realDeliveryFee = effectiveDeliveryFee;
const realTotal = subtotal + realDeliveryFee;


        const orderPayload = {
          customerName: customerName.trim(),
          address: (address === "Outro" ? customAddress : address).trim(),
          street: street.trim(),
          number: number.trim(),
          complement: complement.trim(),
          deliveryType,
          store: selectedStore,
          items: cart.map((item) => ({
            productId: item.product.id,
            name: item.product.name,
            price: item.product.price,
            quantity: item.quantity,
            imageUrl: item.product.imageUrl,
          })),
          total: realTotal,
          deliveryFee: realDeliveryFee,
          phoneNumber,
        };

        const orderRes = await fetch(`${API_URL}/orders`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(orderPayload),
        });

        if (!orderRes.ok) {
          showToast("Falha ao criar pedido.", "error");
          return;
        }

        let orderData: unknown = null;
        const orderText = await orderRes.text();
        try {
          orderData = orderText ? JSON.parse(orderText) : null;
        } catch {
          /* empty */
        }
        const createdOrderId = isOrderResponse(orderData) ? orderData.id : undefined;

        if (!createdOrderId || !Number.isFinite(createdOrderId)) {
          showToast("Pedido criado, mas ID inv√°lido retornado.", "error");
          return;
        }
        currentOrderId = createdOrderId;
        setOrderId(createdOrderId);
        // Guarda a assinatura que originou este pedido
        setLastSig(currentSig);
      }

      try {
        localStorage.setItem("last_order_id", String(currentOrderId));
      } catch {
        /* empty */
      }
      setLastSig(currentSig);

      // 2) Cria a preference e abre o Wallet (modal no mesmo tab)
      const payRes = await fetch(
        `${API_URL}/payments/mp/checkout?orderId=${currentOrderId}`,
        { method: "POST" }
      );
      if (!payRes.ok) {
        showToast("Falha ao iniciar pagamento (Mercado Pago).", "error");
        return;
      }

      let data: unknown = null;
      const text = await payRes.text();
      try {
        data = text ? JSON.parse(text) : null;
      } catch {
        /* empty */
      }
      const prefId = isCheckoutResponse(data) ? data.preferenceId : undefined;

      if (!prefId) {
        showToast("Prefer√™ncia inv√°lida do Mercado Pago.", "error");
        return;
      }

      await openWalletBrick(prefId, currentOrderId!);
      return;
    } catch (e) {
      console.error(e);
      showToast("Erro ao processar pagamento com Mercado Pago.", "error");
    } finally {
      setPaymentBusy(false);
      setPaymentOverlayProgress(100);
      window.setTimeout(() => setPaymentOverlay(false), 350);
      window.clearInterval(overlayTimer);
    }
  }, [
    paymentBusy,
    validateBeforePayment,
    orderId,
    deliveryType,
    effectiveDeliveryFee,

    subtotal,
    customerName,
    address,
    customAddress,
    street,
    number,
    complement,
    selectedStore,
    cart,
    phoneNumber,
    openWalletBrick,
    setPaymentOverlay,
  ]);

  // ---- RENDER ----
  return (
    <div key={componentKey} className="loja-container">
      {/* espa√ßamento para o header */}
      <div className="h-[205px]" />

      <LinhaProdutosAtalhos
        onSelectCategorySubcategory={(category, subcategory) => {
          setQuickFilterCategory(category);
          setQuickFilterSubcategory(subcategory || null);
          setSearch("");
          setCurrentPage(1);
          window.scrollTo({ top: 0, behavior: "smooth" });
        }}
      />

      {/* Cabe√ßalho */}
      <div
        className="fixed left-0 right-0 top-0 z-50 flex flex-col items-center justify-start bg-gradient-to-b from-white/0 via-white/10 to-white bg-cover bg-center bg-no-repeat shadow-md transition-all duration-300"
        style={{
          backgroundImage:
            "url('https://i.pinimg.com/736x/81/6f/70/816f70cc68d9b3b3a82e9f58e912f9ef.jpg')",
          height: `${headerHeight}px`,
          overflow: "hidden",
        }}
      >
        <div className="flex items-center justify-center py-2">
          <img
            src="https://upload.wikimedia.org/wikipedia/commons/9/96/Logo_eskim%C3%B3_Sorvetes_Vermelha.png"
            alt="Eskimo Logo"
            className="h-10 w-auto object-contain"
          />
        </div>

        {showInstruction && (
          <div className="flex justify-center">
            <div className="mb-3 animate-pulse text-sm text-gray-900">
              üëâ Escolha sua unidade para come√ßar
            </div>
          </div>
        )}

       {/* Sele√ß√£o de unidade */}
<div className="z-50 flex flex-wrap justify-center gap-2 px-3 py-1 md:gap-4 md:px-5">
  {["efapi", "palmital", "passo"].map((store) => (
    <button
      key={store}
      onClick={() => {
        if (selectedStore !== store) setSelectedStore(store);
        else {
          setSelectedStore(null);
          setTimeout(() => setSelectedStore(store), 0);
        }
        setCart([]);
        setShowInstruction(false);
        window.scrollTo({ top: 0, behavior: "smooth" });
      }}
      className={`rounded-full border px-3 py-1 text-xs md:px-5 md:py-2 md:text-sm font-semibold shadow transition-all duration-300 ${
        selectedStore === store
          ? "border-yellow-200 bg-yellow-300 text-gray-900 ring-1 ring-yellow-300"
          : "border-gray-300 bg-white text-gray-700 hover:bg-gray-100"
      }`}
      aria-label={`Selecionar unidade ${store}`}
    >
      üç¶ {store === "efapi" ? "Efapi" : store === "palmital" ? "Palmital" : "Passo"}
    </button>
  ))}
</div>


        <div className="mt-1 text-xs text-gray-500">
          {filtered.length} produto(s) encontrado(s)
        </div>
      </div>

      {/* üîç Barra de pesquisa + filtros */}
      <div
        className="fixed z-40 w-full transition-all duration-300"
        style={{
          transform: `translateY(${headerHeight + 5}px)`,
          background: "transparent",
        }}
      >
        <div className="mx-auto w-full max-w-md space-y-3 px-4">
          <input
            type="text"
            placeholder="Buscar produto..."
            className="w-full rounded-xl border border-white/40 bg-white/90 px-4 py-2 text-base shadow-md backdrop-blur-md transition focus:outline-none focus:ring-2 focus:ring-red-300"
            value={search}
            onChange={(e) => {
              setSearch(e.target.value);
              setCurrentPage(1);
              setSelectedCategory(null);
              setSelectedSubcategory(null);
              setQuickFilterCategory(null);
              setQuickFilterSubcategory(null);
              window.scrollTo({ top: 0, behavior: "smooth" });
            }}
            aria-label="Buscar produto"
          />

          <div className="flex gap-2">
            <div className="w-1/2 rounded-xl bg-white/90 shadow-md backdrop-blur-md">
              <select
               className="w-full appearance-none rounded-xl bg-transparent px-4 py-2 text-base text-gray-800 focus:outline-none"
               value={selectedCategory || ""}
                onChange={(e) => {
                  setQuickFilterCategory(null);
                  setQuickFilterSubcategory(null);
                  setSelectedCategory(e.target.value || null);
                  setSelectedSubcategory(null);
                  setSearch("");
                  setCurrentPage(1);
                  window.scrollTo({ top: 0, behavior: "smooth" });
                }}
                aria-label="Selecionar categoria"
              >
                <option value="">Categoria</option>
                {categories.map((cat) => (
                  <option key={cat} value={cat}>
                    {cat}
                  </option>
                ))}
              </select>
            </div>

            <div className="w-1/2 rounded-xl bg-white/90 shadow-md backdrop-blur-md">
              <select
               className="w-full appearance-none rounded-xl bg-transparent px-4 py-2 text-base text-gray-800 focus:outline-none"
               value={selectedSubcategory || ""}
                onChange={(e) => {
                  setQuickFilterCategory(null);
                  setQuickFilterSubcategory(null);
                  setSelectedSubcategory(e.target.value || null);
                  setSearch("");
                  setCurrentPage(1);
                  window.scrollTo({ top: 0, behavior: "smooth" });
                }}
                aria-label="Selecionar subcategoria"
              >
                <option value="">Tipo</option>
                {(selectedCategory ? getSubcategories(selectedCategory) : []).map(
                  (sub) => (
                    <option key={sub} value={sub}>
                      {sub}
                    </option>
                  ),
                )}
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Grade de produtos */}
      <div className="px-6 pb-40">
        {loading ? (
          <div className="grid grid-cols-2 gap-6 sm:grid-cols-3 lg:grid-cols-4">
            {Array.from({ length: 12 }).map((_, idx) => (
              <div
                key={idx}
                className="h-64 w-full animate-pulse rounded-xl bg-gray-100"
              />
            ))}
          </div>
        ) : (
          <div className="produtos-grid">
            {paginados.map((product) => (
              <div key={product.id} className="product-card">
                <div
                  className="product-image-wrapper"
                  onClick={() => {
                    const remaining =
                      product.stock - getQtyInCart(product.id);
                    if (remaining <= 0) {
                      showToast(
                        "Estoque m√°ximo j√° est√° no seu carrinho.",
                        "warning",
                      );
                      return;
                    }
                    setSelectedProduct(product);
                    setQuantityToAdd(1);
                  }}
                >
                  <img
                    loading="lazy"
                    src={product.imageUrl}
                    alt={product.name}
                    className="product-image"
                  />
                </div>
                <div className="product-info">
                  <h3 className="product-title">{product.name}</h3>
                  <p className="product-price">{toBRL(product.price)}</p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Sentinela invis√≠vel para carregar mais */}
      {currentPage < totalPages && (
        <div ref={loadMoreRef} className="mb-24 mt-4 h-10 w-full text-center">
          <span className="text-sm text-gray-400">Carregando mais...</span>
        </div>
      )}

      {/* Rodap√© */}
      <footer className="mt-12 border-t border-gray-200 pt-8 pb-6 text-center bg-gradient-to-b from-white to-gray-50">
        <h2 className="text-lg font-bold text-sky-600 tracking-wide">
          Desenvolvido por{" "}
          <a
            href="https://eistalt.vercel.app/"
            target="_blank"
            rel="noopener noreferrer"
            className="text-sky-700 font-semibold hover:text-sky-500 transition-colors hover:underline decoration-2 underline-offset-4"
          >
            EISTALT
          </a>
        </h2>
      </footer>

      {/* Bot√µes flutuantes */}
      <Link
        onClick={() => {
          /* apenas navega */
        }}
        to="/meus-pedidos"
        className="fixed bottom-48 right-6 z-50 flex flex-col items-center justify-center rounded-2xl bg-blue-500 p-2 text-white shadow-2xl transition-all duration-300 hover:scale-105 active:scale-95"
      >
        <div className="text-3xl">üìú</div>
        <div className="mt-1 text-xs font-bold">Meu</div>
        <div className="mt-1 text-xs font-bold">Pedido</div>
      </Link>

      <button
        onClick={() =>
          dispatch({
            type: "OPEN_CHECKOUT",
          })
        }
        className="fixed bottom-20 right-6 z-50 flex flex-col items-center justify-center rounded-2xl bg-yellow-500 p-3 text-white shadow-2xl transition-all duration-300 hover:scale-105 active:scale-95"
        aria-label="Abrir carrinho"
      >
        <div className="text-3xl">üõí</div>
        <div className="mt-1 flex h-6 w-6 items-center justify-center rounded-full bg-white text-xs font-bold text-yellow-500 shadow-md">
          {cart.reduce((sum, item) => sum + item.quantity, 0)}
        </div>
      </button>

      {/* Drawer simples de checkout/carrinho */}
      {ui.stage === "checkout" && (
        <div
          className="fixed inset-0 z-50 flex items-center justify-center bg-black/30 backdrop-blur-sm"
          role="dialog"
          aria-modal="true"
        >
          {/* Wrapper N√ÉO rol√°vel */}
          <div className="relative w-full max-w-sm">
            <button
              onClick={() => dispatch({ type: "RESET" })}
              className="absolute right-4 top-4 z-10 text-2xl text-gray-400 transition hover:text-red-500"
              aria-label="Fechar"
            >
              ‚úï
            </button>

            {/* Conte√∫do rol√°vel */}
            <div className="animate-zoom-fade max-h-[85vh] overflow-y-auto overscroll-contain rounded-3xl bg-white/90 p-6 pt-10 shadow-2xl">
              <h2 className="mb-4 text-center text-xl font-semibold text-gray-800">
                Finalizar Pedido
              </h2>

              <p className="mt-2 text-sm text-gray-700">
  üöö Entrega: {toBRL(effectiveDeliveryFee)}
</p>


              {/* Nome */}
              <input
                ref={checkoutFirstInputRef}
                type="text"
                placeholder="Seu nome completo"
                className="mb-3 w-full rounded-xl border border-gray-300 bg-gray-50 px-4 py-2 text-base text-gray-700 transition focus:border-red-400 focus:ring focus:ring-red-200"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
              />

              {/* Tipo de entrega fixo visual */}
              <div className="mb-3 w-full rounded-xl border border-gray-300 bg-green-50 px-4 py-2 text-sm text-gray-800">
                üöö Entrega em Casa
              </div>

              <div className="flex flex-col gap-3">
                <select
                className="w-full rounded-xl border border-gray-300 bg-gray-50 px-4 py-2 text-base text-gray-700 transition focus:border-red-400 focus:ring focus:ring-red-200"
                value={address}
                  onChange={(e) => {
                    setAddress(e.target.value);
                    if (e.target.value !== "Outro") setCustomAddress("");
                  }}
                >
                  <option value="">Escolha seu bairro</option>
                  {[
                    "Alvorada",
                    "Bela Vista",
                    "Belvedere",
                    "Centro",
                    "Col√¥nia Cella",
                    "Cristo Rei",
                    "Desbravador",
                    "Dom Ger√¥nimo",
                    "Efapi",
                    "Eldorado",
                    "Engenho Braun",
                    "Esplanada",
                    "Jardim Am√©rica",
                    "Jardim do Lago",
                    "Jardim Europa",
                    "Jardim It√°lia",
                    "Jardim It√°lia II",
                    "Jardim Para√≠so",
                    "Jardim Peperi",
                    "Jardim Sul",
                    "L√≠der",
                    "Maria Goretti",
                    "Monte Castelo",
                    "Palmital",
                    "Palmital II",
                    "Parque das Palmeiras",
                    "Parque das Palmeiras II",
                    "Para√≠so",
                    "Para√≠so II",
                    "Passo dos Ferreira",
                    "Passo dos Fortes",
                    "Pinheirinho",
                    "Presidente M√©dici",
                    "Presidente Vargas",
                    "Quedas do Palmital",
                    "Quinta da Serra",
                    "Residencial Viena",
                    "Saic",
                    "Santa Maria",
                    "Santa Paulina",
                    "Santa Terezinha",
                    "Santo Ant√¥nio",
                    "S√£o Carlos",
                    "S√£o Crist√≥v√£o",
                    "S√£o Jos√©",
                    "S√£o Lucas",
                    "S√£o Pedro",
                    "Semin√°rio",
                    "Trevo",
                    "Universit√°rio",
                    "Vila Esperan√ßa",
                    "Vila Mantelli",
                    "Vila Real",
                    "Vila Rica",
                    "Outro",
                  ].map((b) => (
                    <option key={b} value={b}>
                      {b === "Outro" ? "Outro..." : b}
                    </option>
                  ))}
                </select>

                {address === "Outro" && (
                  <input
                    type="text"
                    placeholder="Digite seu bairro"
                    value={customAddress}
                    onChange={(e) => setCustomAddress(e.target.value)}
                    className="w-full rounded-xl border border-gray-300 bg-gray-50 px-4 py-2 text-base text-gray-700 focus:border-red-400 focus:ring focus:ring-red-200"
                    />
                )}

                <input
                  type="text"
                  placeholder="* Rua (obrigat√≥rio)"
                  value={street}
                  onChange={(e) => setStreet(e.target.value)}
                  required
                  className={`w-full rounded-xl border px-4 py-2 text-base text-gray-700 ${
                    !street
                      ? "border-red-400 bg-red-50"
                      : "border-gray-300 bg-gray-50"
                  } focus:border-red-400 focus:ring focus:ring-red-200`}
                />
                <input
                  type="text"
                  placeholder="* N√∫mero (obrigat√≥rio)"
                  value={number}
                  onChange={(e) => setNumber(e.target.value)}
                  required
                  className={`w-full rounded-xl border px-4 py-2 text-base text-gray-700 ${
                    !number
                      ? "border-red-400 bg-red-50"
                      : "border-gray-300 bg-gray-50"
                  } focus:border-red-400 focus:ring focus:ring-red-200`}
                />
                <input
                  type="text"
                  placeholder="Complemento (opcional)"
                  value={complement}
                  onChange={(e) => setComplement(e.target.value)}
                  className="w-full rounded-xl border border-gray-300 bg-gray-50 px-4 py-2 text-base text-gray-700"
                  />
                <input
                  type="tel"
                  placeholder="* WhatsApp com DDD (ex: 49991234567)"
                  value={phoneNumber}
                  onChange={handlePhoneChange}
                  className={`w-full rounded-xl border px-4 py-2 text-base text-gray-700 ${
                    !phoneNumber || phoneNumber.length < 13
                      ? "border-red-400 bg-red-50"
                      : "border-gray-300 bg-gray-50"
                  } focus:border-red-400 focus:ring focus:ring-red-200`}
                />
              </div>

              <div className="mt-4">
                <div className="mb-4 space-y-1 text-left text-sm text-gray-800">
                  <p>
                    üßÅ Produtos: <strong>{toBRL(subtotal)}</strong>
                  </p>
                  <p>
  üöö Entrega aproximada: <strong>{toBRL(effectiveDeliveryFee)}</strong>
</p>
<p className="text-base font-bold text-green-700">
  üí∞ Total com entrega: {toBRL(subtotal + effectiveDeliveryFee)}
</p>


                 
                </div>

                <div className="flex items-center justify-between">
                  <button
                    onClick={() => dispatch({ type: "RESET" })}
                    className="rounded bg-gray-100 px-4 py-1 text-gray-700 hover:bg-gray-300"
                  >
                    Continuar Comprando
                  </button>

                  <button
                    onClick={async () => {
                      const ok = await validateBeforePayment();
                      // Se j√° existe pedido pendente mas a "assinatura" mudou, cancela o antigo
                      const currentSig = buildOrderSignature(cart, effectiveDeliveryFee, selectedStore);

                      if (orderId && getLastSig() && getLastSig() !== currentSig) {
                        try {
                          await fetch(`${API_URL}/orders/${orderId}/cancel`, { method: "PATCH" });
                        } catch { /* n√£o bloqueia o fluxo */ }
                        setOrderId(null);
                      }

                      if (!ok) return;
                      await handleMercadoPagoPayment();
                    }}
                    disabled={paymentBusy || effectiveDeliveryFee === 0}

                    className={`rounded px-10 py-1 font-semibold transition ${
                      paymentBusy
                        ? "cursor-wait bg-indigo-400 text-white"
                        : effectiveDeliveryFee === 0

                        ? "cursor-not-allowed bg-gray-300 text-gray-500"
                        : "bg-red-500 text-white hover:bg-red-600 active:scale-95"
                    }`}
                  >
                    {paymentBusy ? "Iniciando pagamento..." : "Ir para Pagamento"}
                  </button>
                </div>
              </div>

              {/* Itens do carrinho */}
              <div className="mt-6 max-h-64 space-y-3 overflow-y-auto">
                {cart.map((item) => (
                  <div
                    key={item.product.id}
                    className="flex items-center gap-3 rounded-lg bg-white/80 p-2 shadow-sm"
                  >
                    <img
                      src={item.product.imageUrl}
                      alt={item.product.name}
                      className="h-12 w-12 flex-shrink-0 rounded-md border object-contain"
                    />
                    <div className="flex-1">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium text-gray-800">
                          {item.product.name}
                        </span>
                        <span className="text-xs text-gray-500">
                          {toBRL(item.product.price)} x {item.quantity}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <button
                          aria-label="Diminuir quantidade"
                          onClick={() => updateQuantity(item.product.id, -1)}
                          className="text-red-500"
                        >
                          ‚ûñ
                        </button>
                        <span className="text-sm">{item.quantity}</span>
                        <button
                          aria-label="Aumentar quantidade"
                          onClick={() => updateQuantity(item.product.id, +1)}
                          className="text-green-600"
                        >
                          ‚ûï
                        </button>
                        <button
                          onClick={() => removeFromCart(item.product.id)}
                          className="ml-2 text-xs text-red-600 hover:underline"
                        >
                          Excluir
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            {/* fim do conte√∫do rol√°vel */}
          </div>
          {/* fim do wrapper n√£o rol√°vel */}
        </div>
      )}
      {/* fim do checkout */}

      {/* Overlay ‚ÄúPreparando pagamento...‚Äù (Mercado Pago) */}
      {paymentOverlay && (
        <div className="fixed inset-0 z-[210] flex items-center justify-center bg-white/70 backdrop-blur-sm">
          <div className="flex flex-col items-center gap-4">
            <div className="relative h-16 w-16">
              <div className="absolute inset-0 rounded-full border-4 border-indigo-400/30" />
              <div className="absolute inset-0 animate-spin rounded-full border-4 border-indigo-500 border-t-transparent" />
            </div>
            <div className="w-64 overflow-hidden rounded-full bg-white/80 shadow">
              <div
                className="h-2 rounded-full bg-indigo-500 transition-all"
                style={{ width: `${paymentOverlayProgress}%` }}
              />
            </div>
            <div className="rounded-full bg-white/90 px-4 py-2 text-sm font-semibold text-gray-700 shadow">
              Preparando o pagamento‚Ä¶
            </div>
            <p className="text-xs text-gray-500">
              Se a nova aba n√£o abrir, verifique o bloqueio de pop-ups do seu navegador.
            </p>
          </div>
        </div>
      )}

      {/* Wallet Brick do Mercado Pago */}
      {walletOpen && (
        <div className="fixed inset-0 z-[220] flex items-center justify-center bg-black/40 backdrop-blur-sm">
          <div className="w-[95%] max-w-md rounded-2xl bg-white p-3 shadow-2xl">
            <div id="mp-wallet-container" />
            <div className="mt-3 flex justify-end gap-2">
              <button
                onClick={async () => {
                  try {
                    walletCtrlRef.current?.unmount?.();
                  } catch {
                    /* empty */
                  }
                  setWalletOpen(false);
                  stopPolling();
                  if (orderId) {
                    try { await fetch(`${API_URL}/orders/${orderId}/cancel`, { method: "PATCH" }); } catch { /* empty */ }
                    clearLastSig();
                    setOrderId(null);
                  }
                }}
                className="rounded bg-gray-200 px-3 py-1 text-gray-700 hover:bg-gray-300"
              >
                Cancelar
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Pedido Confirmado */}
      {showConfirmation && orderId !== null && (
        <div
          className="fixed inset-0 z-[100] flex items-center justify-center bg-black/50"
          role="dialog"
          aria-modal="true"
        >
          <div className="w-full max-w-md rounded-2xl bg-white p-8 text-center shadow-xl">
            <span className="mb-6 block text-5xl text-green-600">‚úîÔ∏è</span>
            <h2 className="mb-4 text-2xl font-bold text-green-700">
              Pedido Confirmado!
            </h2>
            <p className="mb-2 text-base font-semibold text-gray-800">
              N√∫mero do pedido:
            </p>
            <div className="mb-3 flex items-center justify-center gap-2">
              <div className="rounded-lg border border-dashed border-green-500 bg-green-50 px-4 py-2 text-lg font-bold text-green-700 shadow-sm">
                #{orderId}
              </div>
              <button
                onClick={() => navigator.clipboard.writeText(orderId.toString())}
                className="rounded bg-green-600 px-3 py-1 text-sm text-white hover:bg-green-700"
              >
                Copiar
              </button>
            </div>
            <p className="mb-6 text-sm text-gray-600">
              Voc√™ poder√° acompanhar o status do seu pedido clicando em{" "}
              <strong>‚ÄúMeu Pedido‚Äù</strong>.
            </p>
            <button
              onClick={() => {
                // ‚úÖ ACK e limpar last_order_id
                if (orderId) setOrderAck(orderId);
                try {
                  localStorage.removeItem("last_order_id");
                } catch { /* empty */ }

                setShowConfirmation(false);
                setOrderId(null);
                setCart([]);
                dispatch({ type: "RESET" });
                setCustomerName("");
                setStreet("");
                setNumber("");
                setComplement("");
                setPhoneNumber("");
                setAddress("");
                setCustomAddress("");

                // agora sim limpar a querystring
                try {
                  window.history.replaceState({}, "", window.location.pathname);
                } catch {
                  /* empty */ }
                setComponentKey((p) => p + 1);
                if (selectedStore)
                  axios
                    .get<Product[]>(
                      `${API_URL}/products/list?store=${selectedStore}&page=1&pageSize=200`,
                    )
                    .then((res) => {
                      if (Array.isArray(res.data)) setProducts(res.data);
                    })
                    .catch(() => {});
              }}
              className="rounded-full bg-green-600 px-6 py-2 text-white hover:bg-green-700"
            >
              Voltar para Loja
            </button>
          </div>
        </div>
      )}

      {/* Modal do produto */}
      {selectedProduct && (
        <div
          className="fixed inset-0 z-50 flex items-center justify-center bg-black/50"
          role="dialog"
          aria-modal="true"
          onClick={() => setSelectedProduct(null)}
        >
          <div
            className="relative w-full max-w-sm rounded-xl bg-white p-4"
            onClick={(e) => e.stopPropagation()}
          >
            <button
              onClick={() => setSelectedProduct(null)}
              className="absolute right-3 top-3 text-xl text-red-600"
              aria-label="Fechar"
            >
              ‚úï
            </button>
            <img
              loading="lazy"
              src={selectedProduct.imageUrl}
              alt={selectedProduct.name}
              className="mb-3 h-60 w-full rounded-lg object-contain"
            />
            <h3 className="mb-1 text-lg font-semibold text-gray-800">
              {selectedProduct.name}
            </h3>
            <p className="mb-2 text-sm text-gray-600">
              {selectedProduct.description}
            </p>
            <div className="mb-2 text-base font-bold text-green-700">
              {toBRL(selectedProduct.price)}
            </div>

            {/* Quantidade + Adicionar */}
            <div className="mb-2 flex items-center justify-between">
              <div className="flex items-center gap-2">
                <button
                  onClick={() =>
                    setQuantityToAdd((q) => Math.max(1, q - 1))
                  }
                  className="rounded bg-gray-200 px-3 py-1 text-gray-700"
                >
                  ‚àí
                </button>
                <span className="min-w-[2ch] text-center">
                  {quantityToAdd}
                </span>
                <button
                  onClick={() =>
                    setQuantityToAdd((q) =>
                      Math.min(q + 1, remainingForSelected || 1),
                    )
                  }
                  className="rounded bg-gray-200 px-3 py-1 text-gray-700"
                >
                  +
                </button>
              </div>
              <button
                onClick={() =>
                  addToCart(selectedProduct, quantityToAdd || 1)
                }
                disabled={remainingForSelected <= 0}
                className={`rounded px-4 py-1 font-semibold transition ${
                  remainingForSelected <= 0
                    ? "cursor-not-allowed bg-gray-300 text-gray-500"
                    : "bg-green-600 text-white hover:bg-green-700"
                }`}
              >
                Adicionar
              </button>
            </div>
            <div className="text-xs text-gray-500">
              Em estoque: {remainingForSelected}
            </div>
          </div>
        </div>
      )}

      {/* Toast simples */}
      {toast && (
        <div
          className="fixed left-1/2 top-4 z-[9999] -translate-x-1/2 rounded-full px-4 py-2 text-sm shadow-md"
          style={{
            background:
              toast.type === "success"
                ? "rgba(34,197,94,0.95)"
                : toast.type === "warning"
                ? "rgba(234,179,8,0.95)"
                : toast.type === "error"
                ? "rgba(239,68,68,0.95)"
                : "rgba(2,132,199,0.95)",
            color: "#fff",
          }}
        >
          {toast.message}
        </div>
      )}
    </div>
  );
}

```

src/MeusPedidos.tsx:
```tsx
// src/MeusPedidos.tsx
import { useEffect, useState } from "react";
import axios from "axios";
import { motion } from "framer-motion";

const API_URL = import.meta.env.VITE_API_URL as string;

interface OrderAPIResponse {
  id: number;
  store: string;
  status: string;
  total: number;
  name?: string;
  customerName?: string;
  phoneNumber: string;
}

interface Order {
  id: number;
  store: string;
  status: string;
  total: number;
  name: string;
  phoneNumber: string;
}

export default function MeusPedidos(): JSX.Element {
  // ---- Estado ----
  const [orderId, setOrderId] = useState<string>("");
  const [order, setOrder] = useState<Order | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>("");

  // ---- Auto-carrega via querystring ?orderId=...&paid=1 ----
  useEffect(() => {
    try {
      const qs = new URLSearchParams(window.location.search);
      const idStr = qs.get("orderId");
      const paid = qs.get("paid") === "1";
      if (!idStr) return;

      setOrderId(idStr);
      setLoading(true);
      setError("");
      setOrder(null);

      axios
        .get<OrderAPIResponse>(`${API_URL}/orders/${Number(idStr)}`)
        .then((res) => {
          const o = res.data;
          const orderFormatado: Order = {
            id: o.id,
            store: o.store,
            status: (o.status || "").toLowerCase(),
            total: o.total,
            phoneNumber: o.phoneNumber,
            name: o.name || o.customerName || "Cliente",
          };
          setOrder(orderFormatado);
        })
        .catch(() => setError("Pedido n√£o encontrado."))
        .then(() => setLoading(false));

      // Se veio com paid=1 mas o status ainda demorar, faz polling curto
      if (paid) {
        const iv = window.setInterval(async () => {
          try {
            const r = await axios.get<OrderAPIResponse>(
              `${API_URL}/orders/${Number(idStr)}`
            );
            const st = String(r.data?.status ?? "").toLowerCase();
            if (st === "pago" || st === "approved" || st === "paid") {
              setOrder({
                id: r.data.id,
                store: r.data.store,
                status: st,
                total: r.data.total,
                phoneNumber: r.data.phoneNumber,
                name: r.data.name || r.data.customerName || "Cliente",
              });
              window.clearInterval(iv);
            }
          } catch {
            // ignora
          }
        }, 4000);
        return () => window.clearInterval(iv);
      }
    } catch {
      // ignora
    }
  }, []);

  // ---- Buscar manualmente por ID digitado ----
  const buscarPedidoPorId = () => {
    if (!orderId) {
      alert("Digite o n√∫mero do pedido!");
      return;
    }

    setLoading(true);
    setError("");
    setOrder(null);

    axios
      .get<OrderAPIResponse>(`${API_URL}/orders/${Number(orderId)}`)
      .then((res) => {
        const p = res.data;
        const orderFormatado: Order = {
          id: p.id,
          store: p.store,
          status: (p.status || "").toLowerCase(),
          total: p.total,
          phoneNumber: p.phoneNumber,
          name: p.name || p.customerName || "Cliente",
        };
        setOrder(orderFormatado);
      })
      .catch(() => {
        setError("Pedido n√£o encontrado.");
      })
      .then(() => {
        setLoading(false);
      });
  };

  const copiarPedidoParaAreaTransferencia = () => {
    if (order) {
      navigator.clipboard.writeText(order.id.toString());
      alert(`N√∫mero do pedido #${order.id} copiado!`);
    }
  };

  // ---- Lista de status em etapas (vertical) ----
  const StatusEtapas = ({ status }: { status: string }) => {
    const s = (status || "").toLowerCase();

    const isPaid = s === "pago" || s === "paid" || s === "approved";
    const isPending = s === "pendente" || s === "pending" || s === "in_process";
    const isFail = s === "cancelado" || s === "rejected" || s === "failure";

    // Exibe o token real do backend quando "pago"
    const apiPaidToken = isPaid ? ` (${s})` : "";

    // Helpers visuais
    const Row = ({
      ok,
      fail,
      label,
    }: {
      ok?: boolean;
      fail?: boolean;
      label: string;
    }) => {
      const icon = fail ? "‚ùå" : ok ? "‚úÖ" : "‚òê";
      const cls = fail
        ? "text-red-600"
        : ok
        ? "text-green-700"
        : "text-gray-500";
      return (
        <div className={`flex items-center gap-2 ${cls}`}>
          <span className="w-5 text-lg leading-none">{icon}</span>
          <span className="text-base">{label}</span>
        </div>
      );
    };

    // Regras:
    // - pending => marca somente "Em processo"
    // - paid/approved => marca Em processo, pago e Confirmado (inclui token do backend)
    // - failure => marca somente "N√£o aprovado"
    // - status desconhecido => mostra todos desmarcados
    return (
      <div className="space-y-1">
        <Row ok={isPending || isPaid} label="Em processo" />
        <Row ok={isPaid} label="pago" />
        <Row ok={isPaid} label={`Confirmado${apiPaidToken}`} />
        <Row fail={isFail} label="N√£o aprovado" />
      </div>
    );
  };

  return (
    <div className="min-h-screen w-full bg-white font-sans text-gray-800">
      <header className="w-full bg-gradient-to-r from-blue-800 to-indigo-700 py-8 shadow-2xl">
        <div className="flex flex-col items-center justify-center">
          <motion.img
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.6 }}
            src="https://upload.wikimedia.org/wikipedia/commons/9/96/Logo_eskim%C3%B3_Sorvetes_Vermelha.png"
            alt="Eskimo Logo"
            className="h-16 w-auto object-contain drop-shadow-2xl"
          />
          <motion.h1
            initial={{ y: -20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.8 }}
            className="mt-4 text-center text-4xl font-extrabold tracking-widest text-gray-50 drop-shadow-lg"
          >
            üßæ Meus Pedidos
          </motion.h1>
        </div>
      </header>

      <div className="flex w-full flex-col items-center justify-center px-6 py-4">
        <motion.a
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          href="/"
          className="mb-6 inline-block rounded-full bg-gradient-to-r from-indigo-600 to-blue-600 px-8 py-3 text-base font-bold text-white shadow-lg transition hover:scale-105 hover:brightness-110 active:scale-95"
        >
          ‚¨ÖÔ∏è Voltar para Loja
        </motion.a>

        <div className="mb-12 flex w-full max-w-xl flex-col items-center gap-5">
          <motion.input
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            type="number"
            placeholder="Digite o n√∫mero do seu pedido"
            className="w-full rounded-xl border border-gray-300 bg-white px-5 py-4 text-lg text-gray-800 placeholder-gray-400 shadow-inner focus:outline-none focus:ring-2 focus:ring-indigo-400"
            value={orderId}
            onChange={(e) => setOrderId(e.target.value)}
          />
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={buscarPedidoPorId}
            className="w-full rounded-xl bg-gradient-to-r from-indigo-600 to-blue-600 px-6 py-4 text-lg font-bold text-white shadow-xl"
          >
            üîç Buscar Pedido
          </motion.button>
          {error && (
            <motion.p
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="text-sm font-semibold text-red-500"
            >
              {error}
            </motion.p>
          )}
        </div>

        {loading ? (
          <div className="flex justify-center">
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ repeat: Infinity, duration: 1, ease: "linear" }}
              className="h-12 w-12 rounded-full border-4 border-indigo-400 border-t-transparent"
            />
          </div>
        ) : order ? (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="w-full max-w-xl rounded-3xl bg-gray-50 p-8 shadow-2xl hover:shadow-indigo-500/50"
          >
            <div className="mb-4 text-2xl font-extrabold text-indigo-800">
              üì¶ Pedido #{order.id}
            </div>
            <div className="mb-2 text-lg">
              <strong>Cliente:</strong> {order.name}
            </div>
            <div className="mb-2 text-lg">
              <strong>Unidade:</strong> {order.store}
            </div>

            <div className="mb-4">
              <div className="mb-1 text-sm font-semibold text-gray-600">Status:</div>
              <StatusEtapas status={order.status} />
            </div>

            <div className="flex flex-col items-end gap-4">
              <div className="text-xl font-bold text-indigo-600">
                Total: R$ {order.total.toFixed(2)}
              </div>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={buscarPedidoPorId}
                className="rounded-full bg-yellow-400 px-6 py-2 text-sm font-semibold text-gray-900 shadow-md"
              >
                üîÑ Atualizar Status
              </motion.button>
            </div>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={copiarPedidoParaAreaTransferencia}
              className="mt-6 w-full rounded-full bg-gradient-to-r from-indigo-500 to-blue-500 px-6 py-3 text-base font-bold text-white shadow-lg"
            >
              üìã Copiar N√∫mero do Pedido
            </motion.button>
          </motion.div>
        ) : null}
      </div>
    </div>
  );
}

```

src/LinhaProdutosAtalhos.tsx:
```tsx
import { useEffect, useState } from "react";

export default function LinhaProdutosAtalhos({
  onSelectCategorySubcategory,
}: {
  onSelectCategorySubcategory: (category: string, subcategory?: string) => void;
}) {
  const imagens = [
    {
      src: "https://eskimo.com.br/wp-content/uploads/2023/04/Linha-Fruta.png",
      category: "Picol√©",
      subcategory: "Frutas",
    },
    {
      src: "https://eskimo.com.br/wp-content/uploads/2023/04/Linha-Creme.png",
      category: "Picol√©",
      subcategory: "Cremes",
    },
    {
      src: "https://eskimo.com.br/wp-content/uploads/2023/04/Linha-Kids.png",
      category: "Picol√©",
      subcategory: "Kids",
    },
    {
      src: "https://eskimo.com.br/wp-content/uploads/2023/09/best-cup.png",
      category: "Pote de Sorvete",
      subcategory: "Best Cup",
    },
    {
      src: "https://eskimo.com.br/wp-content/uploads/2023/05/Acai-900g-sem-lupa.png",
      category: "A√ßa√≠",
    },
    {
      src: "https://eskimo.com.br/wp-content/uploads/2023/04/Pote-2-Litros-1.png",
      category: "Pote de Sorvete",
      subcategory: "2L",
    },
    {
      src: "https://eskimo.com.br/wp-content/uploads/2023/04/Linha-Grand-Nevado-1.png",
      category: "Pote de Sorvete",
      subcategory: "Grand Nevado",
    },
  ];

  const [index, setIndex] = useState(0);

  const nextImage = () => {
    setIndex((prev) => (prev + 1) % imagens.length);
  };

  const prevImage = () => {
    setIndex((prev) => (prev - 1 + imagens.length) % imagens.length);
  };

  useEffect(() => {
    const interval = setInterval(() => {
      nextImage();
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="relative flex w-full flex-col items-center gap-4 py-6">
      <div className="relative flex w-full max-w-md items-center justify-center">
        <button
          onClick={prevImage}
          className="absolute left-2 top-1/2 -translate-y-1/2 text-3xl text-gray-600 hover:text-red-600"
        >
          ‚Äπ
        </button>

        <img
          src={imagens[index].src}
          alt="Linha Eskimo"
          className="h-36 w-auto cursor-pointer object-contain"
          onClick={() =>
            onSelectCategorySubcategory(
              imagens[index].category,
              imagens[index].subcategory,
            )
          }
        />

        <button
          onClick={nextImage}
          className="absolute right-2 top-1/2 -translate-y-1/2 text-3xl text-gray-600 hover:text-red-600"
        >
          ‚Ä∫
        </button>
      </div>

      <div className="flex items-center gap-2">
        {imagens.map((_, i) => (
          <div
            key={i}
            className={`h-1.5 w-5 rounded-full transition-all ${
              i === index ? "bg-red-500" : "bg-gray-300"
            }`}
          />
        ))}
      </div>
    </div>
  );
}

```

src/services/api.ts:
```ts
import axios from "axios";

// Altere a URL conforme necess√°rio (produ√ß√£o/local)
const API_URL = import.meta.env.VITE_API_URL;

const api = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

export default api;

```

src/utils/index.ts:
```ts
// src/utils/index.ts
export function cn(...classes: (string | undefined | false)[]) {
  return classes.filter(Boolean).join(" ");
}

```

src/components/Button.tsx:
```tsx
import { FC, PropsWithChildren } from "react";
import { motion, TapHandlers } from "framer-motion";

import { cn } from "@/utils";



const Button: FC<PropsWithChildren<{ onTap?: TapHandlers["onTap"] }>> = ({
  children,
  onTap,
}) => {
  return (
    <motion.button
      className="group relative cursor-pointer p-1"
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 1 }}
      onTap={onTap}
    >
      <motion.div
        variants={{
          initial: { backgroundPosition: "0 50%" },
          animate: { backgroundPosition: ["0, 50%", "100% 50%", "0 50%"] },
        }}
        initial="initial"
        animate="animate"
        transition={{ duration: 5, repeat: Infinity, repeatType: "reverse" }}
        style={{ backgroundSize: "400% 400%" }}
        className={cn(
          "absolute inset-0 z-[1] rounded-2xl opacity-60 blur-xl transition duration-300 group-hover:opacity-100",
          "bg-[radial-gradient(circle_farthest-side_at_0_100%,#61dafb,transparent),radial-gradient(circle_farthest-side_at_100%_0,#3c82f6,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]",
        )}
      />
      <motion.div
        variants={{
          initial: { backgroundPosition: "0 50%" },
          animate: { backgroundPosition: ["0, 50%", "100% 50%", "0 50%"] },
        }}
        initial="initial"
        animate="animate"
        transition={{ duration: 5, repeat: Infinity, repeatType: "reverse" }}
        style={{ backgroundSize: "400% 400%" }}
        className={cn(
          "absolute inset-[2px] z-[1] rounded-[12px]",
          "bg-[radial-gradient(circle_farthest-side_at_0_100%,#61dafb,transparent),radial-gradient(circle_farthest-side_at_100%_0,#3c82f6,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]",
        )}
      />

      <div className="relative z-10 rounded-[10px] bg-[#282c34] px-4 py-2">
        {children}
      </div>
    </motion.button>
  );
};

export default Button;

```

src/components/Icon.tsx:
```tsx
import { FC } from "react";
import { motion } from "framer-motion";

const icon = {
  hidden: {
    pathLength: 0,
    fill: "rgba(255, 255, 255, 0)",
  },
  visible: {
    pathLength: 1,
  },
};

const Icon: FC = () => {
  return (
    <motion.svg
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      aria-hidden="true"
      role="img"
      width="192"
      height="192"
      preserveAspectRatio="xMidYMid meet"
      viewBox="-2 0 260 228"
      style={{
        stroke: "#61dafb",
        strokeWidth: 3,
        strokeLinejoin: "round",
        strokeLinecap: "round",
      }}
    >
      <motion.path
        d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"
        variants={icon}
        initial="hidden"
        animate="visible"
        transition={{
          default: { duration: 5, ease: "easeIn" },
        }}
      />
    </motion.svg>
  );
};
export default Icon;

```

src/components/Pin.tsx:
```tsx
import { FC, PropsWithChildren, useState } from "react";
import { motion } from "framer-motion";

const Pin: FC<PropsWithChildren<{ text: string }>> = ({ children, text }) => {
  const [transform, setTransform] = useState(
    "translate(-50%,-50%) rotateX(0deg)",
  );

  const onMouseEnter = () => {
    setTransform("translate(-50%,-50%) rotateX(40deg) scale(0.8)");
  };

  const onMouseLeave = () => {
    setTransform("translate(-50%,-50%) rotateX(0deg) scale(1)");
  };

  return (
    <div
      className="group/pin relative z-50 cursor-pointer"
      onMouseEnter={onMouseEnter}
      onMouseLeave={onMouseLeave}
    >
      <div
        style={{
          perspective: "1000px",
          transform: "rotateX(70deg) translateZ(0deg)",
        }}
        className="absolute left-1/2 top-1/2 mt-4 -translate-x-1/2 -translate-y-1/2"
      >
        <div
          style={{ transform: transform }}
          className="shadow-[0_8px_16px_rgb(0_0_0/0.4)]border absolute left-1/2 top-1/2 flex items-start justify-center overflow-hidden rounded-2xl border-white/[0.1] p-4 transition duration-700 group-hover/pin:border-white/[0.2]"
        >
          <div className="relative z-50">{children}</div>
        </div>
      </div>
      <motion.div className="pointer-events-none z-[60] flex h-72 w-72 items-center justify-center opacity-0 transition duration-500 group-hover/pin:opacity-100">
        <div className=" inset-0 h-full w-full flex-none">
          <div className="absolute inset-x-0 top-0 flex justify-center">
            {text}
          </div>
          <motion.div className="absolute bottom-1/2 right-1/2 h-20 w-px translate-x-1/2 translate-y-[14px] bg-gradient-to-b from-transparent to-cyan-500 blur-[2px] group-hover/pin:h-32" />
          <motion.div className="absolute bottom-1/2 right-1/2 h-20 w-px translate-x-1/2 translate-y-[14px] bg-gradient-to-b from-transparent to-cyan-500 group-hover/pin:h-32" />
          <motion.div className="absolute bottom-1/2 right-1/2 z-40 h-[4px] w-[4px] translate-x-1/2 translate-y-[16px] rounded-full bg-cyan-600 blur-[3px]" />
          <motion.div className="absolute bottom-1/2 right-1/2 z-40 h-[2px] w-[2px] translate-x-1/2 translate-y-[16px] rounded-full bg-cyan-300" />
        </div>
      </motion.div>
    </div>
  );
};

export default Pin;

```

src/components/PenguinBlink.jsx:
```jsx
import React, { useEffect, useState } from "react";

const PenguinBlinkWave = () => {
  const [isBlinking, setIsBlinking] = useState(false);
  const [waveStep, setWaveStep] = useState(0);

  useEffect(() => {
    // Intervalo de piscada
    const blinkInterval = setInterval(() => {
      setIsBlinking(true);
      setTimeout(() => setIsBlinking(false), 200); // tempo piscando
    }, 3000); // a cada 5s

    // Intervalo de aceno (4 vezes seguidas)
    const waveInterval = setInterval(() => {
      let count = 0;

      const waveSequence = setInterval(() => {
        setWaveStep((prev) => (prev === 1 ? 2 : 1));
        count++;
        if (count >= 8) {
          // üî¥ 4 acenos completos (2 steps por aceno)
          clearInterval(waveSequence);
          setWaveStep(0); // volta para normal ap√≥s aceno
        }
      }, 300); // troca bra√ßo a cada 300ms
    }, 8000); // a cada 8s

    return () => {
      clearInterval(blinkInterval);
      clearInterval(waveInterval);
    };
  }, []);

  // Define imagem atual
  let penguinImage = "";

  if (isBlinking) {
    penguinImage =
      "https://i.pinimg.com/736x/0e/71/63/0e716360f7b7beabaa5dd9d47bc457bd.jpg"; // piscando
  } else if (waveStep === 1) {
    penguinImage =
      "https://i.pinimg.com/736x/f5/2e/67/f52e672715f070aeb090348c94a833e2.jpg"; // bra√ßo posi√ß√£o 1
  } else if (waveStep === 2) {
    penguinImage =
      "https://i.pinimg.com/736x/3d/0e/76/3d0e76c4810221cc387c707d63efeb28.jpg"; // bra√ßo posi√ß√£o 2
  } else {
    penguinImage =
      "https://i.pinimg.com/736x/1d/9d/80/1d9d80d502c64fc76e665a1706274c3e.jpg"; // normal olho aberto
  }

  return (
    <div
      style={{
        position: "fixed",
        top: "10px",
        right: "50px",
        width: "80px",
        height: "80px",
        zIndex: 9999,
        pointerEvents: "none",
      }}
    >
      <img
        src={penguinImage}
        alt="Penguin blinking and waving"
        style={{ width: "80%", height: "80%" }}
      />
    </div>
  );
};

export default PenguinBlinkWave;

```

src/components/Typewriter.tsx:
```tsx
import { useEffect } from "react";
import { motion, stagger, useAnimate } from "framer-motion";

import { cn } from "@/utils";

const Typewriter = ({
  words,
}: {
  words: { text: string; className?: string }[];
}) => {
  const [scope, animate] = useAnimate();

  useEffect(() => {
    animate(
      "span",
      { display: "inline-block", opacity: 1 },
      { duration: 0.3, delay: stagger(0.1), ease: "easeInOut" },
    );
  }, []);

  const wordsArray = words.map((word) => {
    return { ...word, text: word.text.split("") };
  });

  return (
    <div className="text-center text-5xl font-bold">
      <motion.div ref={scope} className="inline">
        {wordsArray.map((word, i) => {
          return (
            <div key={`${i}`} className="inline-block">
              {word.text.map((char, index) => (
                <motion.span
                  key={`char-${index}`}
                  className={cn("text-whiteopacity-0 hidden", word.className)}
                >
                  {char === " " ? <>&nbsp;</> : char}
                </motion.span>
              ))}
            </div>
          );
        })}
      </motion.div>
      <motion.span
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.8, repeat: Infinity, repeatType: "reverse" }}
        className="ml-1 inline-block h-10 w-1 rounded-sm bg-blue-500"
      ></motion.span>
    </div>
  );
};

export default Typewriter;

```

README.md:
```md
# volpe
 meu site de venda web sitis 

```

